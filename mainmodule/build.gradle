apply plugin: 'com.android.application'


apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


apply plugin: 'walle'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    signingConfigs {
        kadapp {
            keyAlias 'android-release-key.keystore'
            keyPassword project.property('keyPassword')
            storeFile file(project.property('storeFile_path'))
            storePassword project.property('storePassword')
            v2SigningEnabled true
        }
    }


    defaultConfig {
        applicationId appId["main"]
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {

            if (isRunModule.toBoolean()) {
                manifest.srcFile 'src/main/single/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //正式打包的时候把单独运行的xml文件移除
                kotlin{
                    exclude '**/single/**'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.TXT'
        exclude 'META-INF/LICENSE.TXT'
        exclude 'META-INF/LICENSE.TXT'
        exclude 'META-INF/LICENSE.txt'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.kadapp
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.kadapp
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//编译期组件隔离，运行期组件按需依赖
//mainModule需要跟cartModule,goodsModule,usersModule进行交互，所以在运行期添加了依赖
if (!isRunModule.toBoolean()) {
    //获取当前运行的task
    def tasks = project.gradle.startParameter.taskNames
    for (String task : tasks) {
        def upperName = task.toUpperCase()
        //判断task是编译期还是运行期
        if (upperName.contains("ASSEMBLE") || upperName.contains("INSTALL")) {
            dependencies.add("implementation", project.project(':' + 'cartmodule'))
            dependencies.add("implementation", project.project(':' + 'goodsmodule'))
            dependencies.add("implementation", project.project(':' + 'usermodule'))
        }


    }
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${channel}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":routermodule")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}


